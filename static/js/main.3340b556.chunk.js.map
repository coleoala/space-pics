{"version":3,"sources":["refresh.svg","photo.svg","video.svg","stars.svg","components/TopBar/index.js","components/ImageFile/index.js","components/VideoFile/index.js","components/ImageDisplay/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TopBar","refresh","props","getImage","className","onClick","this","src","alt","React","Component","ImageFile","id","data","url","title","explanation","href","target","Photo","VideoFile","thumbnail_url","hdurl","Video","ImageDisplay","imageData","map","media_type","Footer","stars","App","state","fetch","then","res","json","setState","console","log","catch","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,qMCoB5BC,E,4MAfXC,QAAU,WACN,EAAKC,MAAMC,Y,uDAIX,OACI,yBAAKC,UAAU,UACf,4BAAQA,UAAU,gBAAgBC,QAAWC,KAAKL,SAAS,yBAAKM,IAAKN,IAASO,IAAI,kBAClF,qD,GAVSC,IAAMC,W,gBC2BZC,E,uKAvBP,OAEI,6BAEI,yBAAKC,GAAG,gBACJ,yBAAKR,UAAU,aACX,yBAAKG,IAAMD,KAAKJ,MAAMW,KAAKC,IAAMN,IAAMF,KAAKJ,MAAMW,KAAKE,SAE3D,yBAAKX,UAAU,aACX,4BAAME,KAAKJ,MAAMW,KAAKE,OACtB,uBAAGX,UAAU,eAAgBE,KAAKJ,MAAMW,KAAKG,aAC7C,uBAAGZ,UAAU,kBAAkBa,KAAOX,KAAKJ,MAAMW,KAAKC,IAAMI,OAAO,SAAQ,yBAAKX,IAAKY,IAAOf,UAAU,eAAeI,IAAI,qBAAyB,uD,GAflJC,IAAMC,W,gBC2BfU,E,uKAvBP,OAEI,6BAEI,yBAAKR,GAAG,gBACJ,yBAAKR,UAAU,aACX,yBAAKG,IAAMD,KAAKJ,MAAMW,KAAKQ,cAAgBb,IAAMF,KAAKJ,MAAMW,KAAKE,SAErE,yBAAKX,UAAU,aACX,4BAAME,KAAKJ,MAAMW,KAAKE,OACtB,uBAAGX,UAAU,eAAgBE,KAAKJ,MAAMW,KAAKG,aAC7C,uBAAGZ,UAAU,kBAAkBa,KAAOX,KAAKJ,MAAMW,KAAKS,MAAQJ,OAAO,SAAQ,yBAAKX,IAAKgB,IAAOnB,UAAU,eAAeI,IAAI,sBAA0B,qD,GAfrJC,IAAMC,WCiBfc,EAfM,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAGpB,OACI,6BACKA,EAAUC,KAAI,SAACb,GAAD,MAEU,UAArBA,EAAKc,WAA0B,kBAAC,EAAD,CAAWd,KAAMA,IAAW,kBAAC,EAAD,CAAWA,KAAMA,S,iBCK7Ee,E,uKAXP,OACI,yBAAKxB,UAAU,UACX,uBAAGA,UAAU,aAAaa,KAAK,mCAAmCC,OAAO,SAAzE,6BACA,uBAAGd,UAAU,aAAaa,KAAK,uBAAuBC,OAAO,SAA7D,kBACA,uBAAGd,UAAU,aAAaa,KAAK,wBAAwBC,OAAO,SAAQ,yBAAKX,IAAKsB,IAAOrB,IAAI,qB,GAPtFC,IAAMC,WCwCZoB,G,kNAnCbC,MAAQ,CACNN,UAAY,I,EAGdtB,SAAW,WACT6B,MAAM,4GACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACpB,GACL,EAAKuB,SAAS,CAAEX,UAAWZ,IAC3BwB,QAAQC,IAAI,EAAKP,MAAMN,cAExBc,MAAMF,QAAQC,M,kEAIfhC,KAAKH,a,+BAIL,OACE,yBAAKS,GAAG,YACN,yBAAKR,UAAU,kBACb,kBAAC,EAAD,CAAQD,SAAUG,KAAKH,WACvB,kBAAC,EAAD,CAAcsB,UAAWnB,KAAKyB,MAAMN,aAEtC,yBAAKb,GAAG,mBACN,kBAAC,EAAD,Y,GA5BQH,IAAMC,YCMJ8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdf,OAAM,SAAAgB,GACLlB,QAAQkB,MAAMA,EAAMC,c","file":"static/js/main.3340b556.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/refresh.7990ca49.svg\";","module.exports = __webpack_public_path__ + \"static/media/photo.b2f4c180.svg\";","module.exports = __webpack_public_path__ + \"static/media/video.12ff4969.svg\";","module.exports = __webpack_public_path__ + \"static/media/stars.2d63439e.svg\";","import React from 'react';\r\nimport refresh from '../../refresh.svg';\r\n\r\nclass TopBar extends React.Component {\r\n\r\n    refresh = () => {\r\n        this.props.getImage();\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"topBar\">\r\n            <button className=\"refreshButton\" onClick = {this.refresh}><img src={refresh} alt=\"refresh icon\"></img></button>\r\n            <h1>Astronomy Images</h1>\r\n          </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default TopBar;","import React from 'react';\r\nimport Photo from '../../photo.svg';\r\n\r\nclass ImageFile extends React.Component {\r\n\r\n    render() {\r\n\r\n        return(\r\n\r\n            <div>\r\n                \r\n                <div id=\"imageContent\">    \r\n                    <div className=\"imageView\">\r\n                        <img src={ this.props.data.url } alt={ this.props.data.title }/>\r\n                    </div>\r\n                    <div className=\"imageText\">\r\n                        <h3>{ this.props.data.title }</h3>\r\n                        <p className=\"explanation\">{ this.props.data.explanation }</p>\r\n                        <a className=\"fullImageButton\" href={ this.props.data.url } target=\"blank\"><img src={Photo} className=\"iconInButton\" alt=\"full screen icon\"></img><span>See full Size</span></a>\r\n                    </div>\r\n                </div>\r\n\r\n            \r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default ImageFile;\r\n\r\n","import React from 'react';\r\nimport Video from '../../video.svg';\r\n\r\nclass VideoFile extends React.Component {\r\n\r\n    render() {\r\n\r\n        return(\r\n\r\n            <div>\r\n                \r\n                <div id=\"imageContent\">    \r\n                    <div className=\"imageView\">\r\n                        <img src={ this.props.data.thumbnail_url } alt={ this.props.data.title }/>\r\n                    </div>\r\n                    <div className=\"imageText\">\r\n                        <h3>{ this.props.data.title }</h3>\r\n                        <p className=\"explanation\">{ this.props.data.explanation }</p>\r\n                        <a className=\"fullImageButton\" href={ this.props.data.hdurl } target=\"blank\"><img src={Video} className=\"iconInButton\" alt=\"video player icon\"></img><span>Watch Video</span></a>\r\n                    </div>\r\n                </div>\r\n\r\n            \r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default VideoFile;","import React from 'react';\r\nimport ImageFile from '../ImageFile';\r\nimport VideoFile from '../VideoFile';\r\n\r\n\r\nconst ImageDisplay = ({ imageData }) => {\r\n    \r\n    \r\n    return(\r\n        <div>\r\n            {imageData.map((data) => (\r\n                \r\n                data.media_type  === \"image\" ? <ImageFile data={data} /> : <VideoFile data={data} />\r\n\r\n            ))}\r\n       \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageDisplay;","import React from 'react';\r\nimport stars from '../../stars.svg';\r\n\r\nclass Footer extends React.Component {\r\n    \r\n    render() {\r\n        return(\r\n            <div className=\"footer\">\r\n                <a className=\"footerLink\" href=\"https://github.com/nasa/apod-api\" target=\"blank\">Made with NASA's APOD API</a>\r\n                <a className=\"footerLink\" href=\"https://www.nasa.gov\" target=\"blank\">Visit NASA.gov</a>\r\n                <a className=\"footerIcon\" href=\"https://www.tfes.org/\" target=\"blank\"><img src={stars} alt=\"stars icon\"></img></a>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport TopBar from './components/TopBar';\nimport ImageDisplay from './components/ImageDisplay';\nimport Footer from './components/Footer';\nimport './App.css';\n\nclass App extends React.Component {\n\n  state = {\n    imageData:  []\n  }\n\n  getImage = () => {\n    fetch('https://api.nasa.gov/planetary/apod?api_key=9D3Rs6Pc1pu6ae27fwC9MYDnaFT0YLA8yNJCa2cd&count=1&thumbs=true')\n    .then(res => res.json())\n    .then((data) => {\n      this.setState({ imageData: data })\n      console.log(this.state.imageData)\n    })\n    .catch(console.log)\n  }\n\n  componentDidMount() {\n    this.getImage();\n  }\n\n  render() {\n    return(\n      <div id=\"wrapper1\">\n        <div className=\"fullContentDiv\">\n          <TopBar getImage={this.getImage}  />\n          <ImageDisplay imageData={this.state.imageData} />\n        </div>\n        <div id=\"footerContainer\">\n          <Footer />\n        </div>\n      </div>\n      \n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}